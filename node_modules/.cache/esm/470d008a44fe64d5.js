let chalk,fs,ncp,path,promisify;_44f‍.x([["createProject",()=>createProject]]);_44f‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_44f‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_44f‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_44f‍.w("path",[["default",["path"],function(v){path=v}]]);_44f‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);





const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
 return copy(options.templateDirectory, options.targetDirectory, {
   clobber: false,
 });
}

       async function createProject(options) {
 options = {
   ...options,
   targetDirectory: options.targetDirectory || process.cwd(),
 };

 const currentFileUrl = _44f‍._.meta.url;
 const templateDir = path.resolve(
   new URL(currentFileUrl).pathname,
   '../../templates',
   options.template.toLowerCase()
 );
 options.templateDirectory = templateDir;

 try {
   await access(templateDir, fs.constants.R_OK);
 } catch (err) {
   _44f‍.g.console.error('%s Invalid template name\n%s', chalk.red.bold('ERROR'),err);
   process.exit(1);
 }

 console.log('Copy project files');
 await copyTemplateFiles(options);

 _44f‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
 return true;
}